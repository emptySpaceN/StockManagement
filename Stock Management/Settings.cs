using System;
using System.IO;
using System.Drawing;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using StockManagementCore;
using System.Threading;
using System.Globalization;
using System.Resources;
using System.Data;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;

namespace StockManagement
{
    public partial class Settings : Form
    {
        #region Variables
        // *************************
        // ******** Classes ********
        // *************************
        public Main MainMenuPublic { get; set; } = null;
        public StockManagement StockManagementMenu { get; set; } = null;
        public SearchWindow SeachWindowMenu { get; set; } = null;
        private FileLoggingSystem fileLogging = null;
        public FileLocking ConfugurationFileLocking { get; set; } = null;
        // *************************
        // *************************
        // *************************

        public ResourceManager Localisation { get; set; } = null;

        private Dictionary<string, int> delimiters = null;
        public bool ConfigurationFileExists { get; set; } = false;

        // Variables for the moveable form
        private int moveFormXDifference = 0;
        private int moveFormYDifference = 0;

        private string applicationConfigurationFile = @"config\configuration.xml";
        public XDocument Xdoc { get; set; } = null;

        private Exception error = null;
        #endregion

        public Settings()
        {
            InitializeComponent();

            // Events
            this.FormClosing += new FormClosingEventHandler(SettingsMenu_FormClosing);
            this.Load += new EventHandler(SettingsMenu_Load);
            this.MouseDown += new MouseEventHandler(SettingsMenu_MouseDown);
            this.MouseMove += new MouseEventHandler(SettingsMenu_MouseMove);
        }

        #region Form events
        private void SettingsMenu_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (File.Exists(DataFileText.Text))
            {
                if (File.Exists(applicationConfigurationFile))
                {
                    if (MainMenuPublic != null)
                    {
                        MainMenuPublic.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("DataReferences").Element("CustomerFile").Value = DataFileText.Text;
                        ConfugurationFileLocking.WriteXDocument(MainMenuPublic.Xdoc);
                    }
                    else
                    {
                        StockManagementMenu.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("DataReferences").Element("CustomerFile").Value = DataFileText.Text;
                        ConfugurationFileLocking.WriteXDocument(StockManagementMenu.Xdoc);
                    }

                    // TODO: clear
                }
                else
                {
                    ConfugurationFileLocking = new FileLocking();

                    if (ConfugurationFileLocking.CreateAndLock(applicationConfigurationFile, FileAccess.ReadWrite, FileShare.Read, ref error))
                    {
                        using (XmlWriter writer = XmlWriter.Create(ConfugurationFileLocking.LockedFile))
                        {
                            writer.WriteStartDocument();
                            writer.WriteComment("This file is generated by the program. It contains application settings and all customer data.");

                            writer.WriteStartElement("ConfigFile");

                            writer.WriteStartElement("ApplicationSettings");

                            // DataReferences element
                            writer.WriteStartElement("DataReferences");
                            writer.WriteElementString("CustomerFile", DataFileText.Text);
                            writer.WriteEndElement();

                            // DataReferences element
                            writer.WriteStartElement("GeneralSettings");
                            writer.WriteElementString("CurrentUser", Environment.UserName);

                            switch (LanguageHolder.Text)
                            {
                                case "English":
                                case "Englisch":
                                    {
                                        writer.WriteElementString("Language", "English");
                                    }
                                    break;
                                case "German":
                                case "Deutsch":
                                    {
                                        writer.WriteElementString("Language", "German");
                                    }
                                    break;
                                default:
                                    {
                                        // Placeholder - will never be reached
                                        // TODO: Create a protocol just to catch that case
                                    }
                                    break;

                            }
                            writer.WriteEndElement();

                            writer.WriteEndElement();

                            writer.WriteStartElement("CustomerData");
                            writer.WriteEndElement();

                            writer.WriteEndDocument();
                        }

                        // Asign the just created filestream to the variable in the main menu, do the same with the XDocument
                        MainMenuPublic.ConfugurationFileLocking = ConfugurationFileLocking;
                        MainMenuPublic.Xdoc = XDocument.Load(ConfugurationFileLocking.LockedFile);
                    }
                }

                if (!this.Owner.Visible) { this.Owner.Visible = true; }

                this.Owner.BringToFront();
            }
            else
            {
                MessageBox.Show(Localisation.GetString("SettingsMenu_ValidFile"));

                e.Cancel = true;
            }
        }

        private void SettingsMenu_Load(object sender, EventArgs e)
        {
            // Initialisation
            fileLogging = new FileLoggingSystem();
            delimiters = new Dictionary<string, int>();

            if (ConfigurationFileExists)
            {
                Xdoc = XDocument.Load(ConfugurationFileLocking.LockedFile);
            }

            // Values available in the dictionary
            // Explained: <key = string delimiter, value = asci equivalent>
            delimiters.Add("Tabstopp", 9);
            delimiters.Add(",", 44);
            delimiters.Add(";", 59);

            // Add the delimiters to the drop down menu
            DelimiterText.Items.Add("Tabstopp");
            DelimiterText.Items.Add(",");
            DelimiterText.Items.Add(";");
            DelimiterText.SelectedIndex = 0;

            // Set all text regarding the current culture info
            SetLocalisation(false);
            
            // Screen resolution variables
            int screenWidth = Screen.PrimaryScreen.Bounds.Width;
            int screenHeigth = Screen.PrimaryScreen.Bounds.Height;

            // Form settings
            this.BackColor = Color.FromArgb(222, 222, 222);
            //this.Width = (screenWidth / 5) * 2;
            //this.Height = (screenHeigth / 5) * 2;
            this.Left = (screenWidth - this.Width) / 2;
            this.Top = (screenHeigth - this.Height) / 2;

            //DataFileText.Left = DataFileTitle.Right + 10;

            //DataFileTitle.Left = DataFileText.Left - DataFileTitle.Width - 10;

            BackgroundPanel.Left = 10;
            BackgroundPanel.Top = 10;
            BackgroundPanel.Width = this.ClientSize.Width - 20;
            BackgroundPanel.Height = this.ClientSize.Height - 20;
            
            AdditionalSettings();

            try
            {
                InitialiseDataPreview();
            }
            catch (Exception)
            {
            }
            
        }

        private void InitialiseDataPreview()
        {
            DataTable sheetOneDatatable = new DataTable();

            char delimeter = Convert.ToChar(delimiters.FirstOrDefault(x => x.Key == DelimiterText.SelectedItem.ToString()).Value);          

            // Get the column count from the first line of the file
            int SheetOnecolumnCount = (File.ReadLines(DataFileText.Text).First().Split(delimeter).Length);

            if (DataPreview.Columns.Count > 0 || DataPreview.Rows.Count > 0)
            {
                DataPreview.DataSource = null;
            }

            // TODO: Currently rowCount isn't needed - probably clean it
            //int rowCount = File.ReadLines(getPathFile.Element("CustomerFile").Value).Count();
            try
            {
                using (StreamReader sr = File.OpenText(DataFileText.Text))
                {
                    int lineCounter = 0;
                    int tabulatorCounter = 0;
                    int columnCount = 0;
                    string s = "";
                    string[] wholeLine = { "" };
                    DataRow dr = null;

                    DataPreview.AllowUserToAddRows = false;     // Disable the default row
                    DataPreview.DoubleBuffered(true);           // Enable the boublebuffering for fast scrolling

                    while ((s = sr.ReadLine()) != null)
                    {
                        wholeLine = s.Split(delimeter);
                        tabulatorCounter = 0;
                        columnCount = s.Count(x => x == delimeter);
                        dr = null;

                        lineCounter++;

                        if (!string.IsNullOrWhiteSpace(s))
                        {
                            foreach (string tabulator in wholeLine)
                            {
                                tabulatorCounter++;

                                // The tabulatorCounter represents the columns and is always 1 time bigger because the tabulator is inbetween the columns
                                if (lineCounter == 1)
                                {
                                    // TODO: Check if it is possible to add multiple columns with the same name
                                    sheetOneDatatable.Columns.Add(tabulator);
                                }
                                else if (lineCounter != 1)
                                {
                                    if (dr == null) { dr = sheetOneDatatable.NewRow(); }

                                    dr[tabulatorCounter - 1] = tabulator;
                                }
                            }

                            if (dr != null) { sheetOneDatatable.Rows.Add(dr); }
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
            catch (Exception err)
            {
                // TODO: Protocoll it
            }
            
            // Create a BindingSource the datatable to it
            BindingSource sheetOneBindingsSource = new BindingSource
            {
                DataSource = sheetOneDatatable,
            };

            // ***********************************************************************
            // ******** Needed if you're on another thread as the main thread ********
            // ***********************************************************************
            MethodInvoker AsignNewDataSource = delegate
            {
                // Asign the BindingSource to the DataGridView
                DataPreview.DataSource = sheetOneBindingsSource;
            };

            if (DataPreview.InvokeRequired)
            {
                Invoke(AsignNewDataSource);
            }
            else
            {
                // Asign the BindingSource to the DataGridView
                DataPreview.DataSource = sheetOneBindingsSource;
            }

            //DataPreview.Columns["Sorting"].Visible = false;
        }

        private void SettingsMenu_MouseDown(object sender, MouseEventArgs e)
        {
            moveFormYDifference = (Cursor.Position.Y - this.Top);
            moveFormXDifference = (Cursor.Position.X - this.Left);
        }

        private void SettingsMenu_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                this.Top = Cursor.Position.Y - moveFormYDifference;
                this.Left = Cursor.Position.X - moveFormXDifference;
            }
        }
        #endregion

        #region Control events
        // Control: BrowseFile
        private void BrowseDataFile_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog mainSheet = new OpenFileDialog())
            {
                mainSheet.Multiselect = false;

                mainSheet.Title = Localisation.GetString("SettingsMenu_FileDilalogCustomerFile");
                mainSheet.InitialDirectory = Application.StartupPath;
                mainSheet.FileName = "";
                mainSheet.Filter = "txt files (*.txt)|*.txt";

                DialogResult result = mainSheet.ShowDialog();

                if (result == DialogResult.OK && File.Exists(mainSheet.FileName))
                {
                    DataFileText.Text = mainSheet.FileName;

                    InitialiseDataPreview();
                }
            }
        }

        private void LanguageHolder_SelectionChangeCommitted(object sender, EventArgs e)
        {
            switch (LanguageHolder.Text)
            {
                case "English":
                case "Englisch":
                {
                    Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");

                    if (Xdoc != null)
                    {
                        if (MainMenuPublic != null)
                        {
                            MainMenuPublic.CurrentLanguagePublic = Main.Languages.English;
                            MainMenuPublic.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("GeneralSettings").Element("Language").Value = "English";
                            ConfugurationFileLocking.WriteXDocument(MainMenuPublic.Xdoc);
                        }
                        else
                        {
                            StockManagementMenu.CurrentLanguage = StockManagement.Languages.English;
                            StockManagementMenu.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("GeneralSettings").Element("Language").Value = "English";
                            ConfugurationFileLocking.WriteXDocument(StockManagementMenu.Xdoc);
                        }
                    }

                    LanguageHolder.Items[0] = "English";
                    LanguageHolder.Items[1] = "German";

                    LanguageHolder.Text = LanguageHolder.Items[0].ToString();
                }
                break;
                case "German":
                case "Deutsch":
                {
                    Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("de-DE");

                    if (Xdoc != null)
                    {
                        if (MainMenuPublic != null)
                        {
                            MainMenuPublic.CurrentLanguagePublic = Main.Languages.German;
                            MainMenuPublic.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("GeneralSettings").Element("Language").Value = "German";
                            ConfugurationFileLocking.WriteXDocument(MainMenuPublic.Xdoc);
                        }
                        else
                        {
                            StockManagementMenu.CurrentLanguage = StockManagement.Languages.German;
                            StockManagementMenu.Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("GeneralSettings").Element("Language").Value = "German";
                            ConfugurationFileLocking.WriteXDocument(StockManagementMenu.Xdoc);
                        }
                    }

                    LanguageHolder.Items[0] = "Englisch";
                    LanguageHolder.Items[1] = "Deutsch";

                    LanguageHolder.Text = LanguageHolder.Items[1].ToString();
                }
                break;
                default:
                {
                    // Placeholder - will never be reached
                    // TODO: Create a protocol just to catch that case
                }
                break;
            }

            // Set the localisation of the settings menu
            SetLocalisation(true);

            // Set the localisation of the current background menu
            if (MainMenuPublic != null)
            {
                MainMenuPublic.SetLocalisation();
            }

            if (StockManagementMenu != null)
            {
                StockManagementMenu.SetLocalisation();
            }

            if (SeachWindowMenu != null)
            {
                SeachWindowMenu.SetLocalisation();
            }
        }

        private void ApplyDelimiter_Click(object sender, EventArgs e)
        {
            InitialiseDataPreview();
        }

        private void DelimiterText_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                InitialiseDataPreview();
            }
        }

        private void DelimiterText_SelectionChangeCommitted(object sender, EventArgs e)
        {
            InitialiseDataPreview();
        }
        #endregion

        #region Functions
        private void SetLocalisation(bool _SkipSettingsInitialization)
        {
            // Initialize the configuration file
            if (!_SkipSettingsInitialization) { InitializeSettingsFile(); }

            this.Text = Localisation.GetString("SettingsMenuTitle");

            DataFileTitle.Text = Localisation.GetString("SettingsMenu_BrowseFileTitle");
            BrowseDataFile.Text = Localisation.GetString("SettingsMenu_BrowseFile");

            AdditionalSettingsGroup.Text = Localisation.GetString("SettingsMenu_GroupBox_AdditionalSettings");
            LanguageTitle.Text = Localisation.GetString("SettingsMenu_Language");
            DelimiterTitle.Text = Localisation.GetString("SettingsMenu_Delimiter");

            DataPreviewTitle.Text = Localisation.GetString("SettingsMenu_DataPreview");
        }

        private void InitializeSettingsFile()
        {
            if (ConfigurationFileExists)
            {
                string currentLanguage = (MainMenuPublic == null ? StockManagementMenu.CurrentLanguage.ToString() : MainMenuPublic.CurrentLanguagePublic.ToString());

                switch (currentLanguage)
                {
                    case "English":
                    {
                        LanguageHolder.Items.Add("English");
                        LanguageHolder.Items.Add("German");

                        LanguageHolder.Text = LanguageHolder.Items[0].ToString();
                    }
                    break;
                    case "German":
                    {
                        LanguageHolder.Items.Add("Englisch");
                        LanguageHolder.Items.Add("Deutsch");

                        LanguageHolder.Text = LanguageHolder.Items[1].ToString();
                    }
                    break;
                    default:
                    {
                        // Placeholder - will never be reached
                        // Set english as the current language and write it to the settings file
                        fileLogging.Log("The configuration file \"configuration.xml\" was missing and will now be created. - Inner line");

                        //LanguageHolder.Items.Add("English");
                        //LanguageHolder.Items.Add("German");

                        //LanguageHolder.Text = LanguageHolder.Items[0].ToString();
                    }
                    break;
                }
            }
            else
            {
                Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");

                LanguageHolder.Items.Add("English");
                LanguageHolder.Items.Add("German");

                // English is the default language when no confiuration file exists and is about to created
                LanguageHolder.Text = LanguageHolder.Items[0].ToString();

                fileLogging.Log("The configuration file \"configuration.xml\" was missing and will now be created. - Outer line");
            }
        }

        public void AdditionalSettings()
        {
            if (ConfigurationFileExists)
            {
                if (File.Exists(ConfugurationFileLocking.LockedFile.Name))
                {
                    DataFileText.Text = Xdoc.Element("ConfigFile").Element("ApplicationSettings").Element("DataReferences").Element("CustomerFile").Value;
                    DataFileText.SelectionStart = 0;
                }
                else
                {
                    // TODO: fill if else statement
                }
            }
            else
            {
                // TODO: fill if else statement
            }

            DataPreview.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }
        #endregion
    }
}